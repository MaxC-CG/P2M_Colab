# 计算凸包：从.ply中计算凸包获取.obj
import trimesh
import argparse
import pathlib
import sys
from utils import *
from models.layers.mesh import *
import warnings


def check_args(args):
    # 检查参数完整
    if not args.i.exists():
        raise FileNotFoundError('cannot find input file')

    if not (args.manifold_path / 'manifold').exists():
        raise FileNotFoundError('cannot find manifold software')

    if not (args.manifold_path / 'simplify').exists():
        raise FileNotFoundError('cannot find simplify software')

    if not args.o:
        # 无输出路径
        args.o = args.i.with_name(args.i.name.split('.')[0] + '_hull.obj')
        print(args.o)
    else:
        args.o = Path(args.o)


def count_faces(path: Path) -> int:
    with open(path, 'r') as file:
        lines = file.read().split('\n')
    num=list(map(lambda x: x.startswith('f'), lines)).count(True)
    return num

def inplace_manifold(path: Path, res: int, manifold_software_path: Path):
    cmd = f'{manifold_software_path}/manifold {path} {path} {res}'
    os.system(cmd)


def inplace_simplify(path: Path, faces: int, manifold_software_path: Path):
    cmd = f'{manifold_software_path}/simplify -i {path} -o {path} -f {faces}'
    os.system(cmd)


def Calc(args):
    points, normals = read_pts_from_pc(args.i)

    m = trimesh.convex.convex_hull(points[:, :3])   # trimesh生成凸包网格
    vs, faces = m.vertices, m.faces

    export(args.o, vs, faces)

    inplace_manifold(args.o, args.manifold_res, args.manifold_path) # 对生成凸包做watertight流形处理

    num_faces = count_faces(args.o) # 计算生成凸包的面的数量
    num_faces = int(num_faces)
    if num_faces < args.faces_num:
        # 少于目标面数
        software = 'manifold'
        warnings.warn(f'only {num_faces} faces where generated by {software}. '
                      f'try increasing --{software}-res to achieve the desired target of {args.faces_num} faces')
    else:
        # 多与目标面数，简化
        inplace_simplify(args.o, args.faces_num, args.manifold_path)

    print('=== Done! ===')

if __name__ == '__main__':
    cur_path = os.path.dirname(os.path.abspath(__file__))
    print(cur_path)
    parser = argparse.ArgumentParser(description='Convex hull maker')
    parser.add_argument('--i', type=Path, required=True,
                        help='path to read .xyz/.npts or .ply from')
    parser.add_argument('--faces-num', type=int, required=True, help='#target-face-num of the convex hull')

    parser.add_argument('--o', type=str, required=False,
                        help='path to output convex hull obj to', default='')
    parser.add_argument('--manifold-path', type=Path, required=False,
                        help='path to PWM-build folder')
    parser.add_argument('--manifold-res', type=int, default=5000, required=False,
                        help='resolution for Manifold Generation')

    args = parser.parse_args()
    check_args(args)
    Calc(args)
